<?php
/**
 * @file
 * Install, update and uninstall functions for the issues installation profile.
 */

/**
 * Implements hook_install().
 *
 * Performs actions to set up the site for this profile.
 *
 * @see system_install()
 */
function issues_profile_install() {
  // Create the user administrator role and assign all permissions to it.
  // First create the new role
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  // Then grant it all permissions.
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Also save it to the variables table.
  variable_set('user_admin_role', $admin_role->rid);

  $admin_theme = 'seven';
  $default_theme = 'issues';
  // Enable themes.
  $themes = array($admin_theme, 'bootstrap', $default_theme);
  theme_enable($themes);
  // Make seven the admin theme.
  variable_set('admin_theme', $admin_theme);
  // variable_set('node_admin_theme', '1');
  // Make issues the default theme.
  variable_set('theme_default', $default_theme);
  db_update('system')
    ->fields(array('weight' => '1'))
    ->condition('name', $default_theme)
    ->execute();

  // Clear all caches.
  drupal_flush_all_caches();
  // Rebuild the registry;
  registry_rebuild();
}

/**
 * Implements hook_install_tasks().
 */
function issues_profile_install_tasks(&$install_state) {
  // Remove any status messages that might have been set. They are  not needed.
  drupal_get_messages('status', TRUE);

  $tasks = array();

  $tasks['issues_profile_install_additional_modules'] = array(
    'display_name' => st('Install additional functionality'),
    'display' => FALSE,
    'type' => 'normal',
  );

  return $tasks;
}

/**
 * Implements hook_install_tasks_alter().
 */
function issues_profile_install_tasks_alter(&$tasks, $install_state) {
  // Override the install_import_locales task with our own.
  $tasks['install_import_locales']['function'] = 'issues_profile_install_import_locales';
  $tasks['install_import_locales']['display'] = TRUE;
  $tasks['install_import_locales']['run'] = INSTALL_TASK_RUN_IF_NOT_COMPLETED;
  // Override the install_import_locales_remaining task with our own.
  $tasks['install_import_locales_remaining']['function'] = 'issues_profile_install_import_locales_remaining';
  $tasks['install_import_locales_remaining']['display'] = TRUE;
  $tasks['install_import_locales_remaining']['run'] = INSTALL_TASK_RUN_IF_NOT_COMPLETED;
  // Override the install_finished task with our own.
  $tasks['install_finished']['function'] = 'issues_profile_install_finished';
/*
  // The "Welcome" screen needs to come after the first two steps
  // (profile and language selection).
  $new_task['issues_profile_install_welcome'] = array(
    'display' => TRUE,
    'display_name' => st('Welcome'),
    'type' => 'form',
    'run' => isset($install_state['parameters']['welcome']) ? INSTALL_TASK_SKIP : INSTALL_TASK_RUN_IF_REACHED,
  );
  $old_tasks = $tasks;
  $tasks = array_slice($old_tasks, 0, 2) + $new_task + array_slice($old_tasks, 2);
*/
}

/**
 * Task callback: shows the welcome screen.
 */
/*
function issues_profile_install_welcome($form, &$form_state, &$install_state) {
  drupal_set_title(st('Welcome to The Issues Tool'));
  $message = '<p>' . st('Thank you for choosing The Issues Tool.') . '</p>';
  $form = array();
  $form['welcome_message'] = array(
    '#markup' => $message,
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st("Install The Issues Tool"),
    '#weight' => 10,
  );
  return $form;
}

function issues_profile_install_welcome_submit($form, &$form_state) {
  global $install_state;

  $install_state['parameters']['welcome'] = 'done';
}
*/
/**
 * Task callback: uses Batch API to enable modules.
 *
 * Installs the issues feature.
 */
function issues_profile_install_additional_modules(&$install_state) {
  $modules = array(
    'issues_feature',
  );
  // Enable the modules.
  module_enable($modules, FALSE);

  // Clear all caches.
  drupal_flush_all_caches();
  // Rebuild the registry;
  registry_rebuild();
}

/**
 * Imports languages via a batch process during installation.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 *
 * @return
 *   The batch definition, if there are language files to import.
 */
function issues_profile_install_import_locales(&$install_state) {
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  $install_locale = $install_state['parameters']['locale'];
  include_once DRUPAL_ROOT . '/includes/iso.inc';
  $predefined = _locale_get_predefined_list();

  $batch = array();
  $components = array();
  $locales = array(
    'ar' => 'ar',
    'es' => 'es',
    'fr' => 'fr',
    'ru' => 'ru',
  );
  foreach ($locales as $locale) {
    $name = isset($predefined[$locale]) ? NULL : $locale;
    $native = isset($predefined[$locale]) ? NULL : $locale;
    $direction = isset($predefined[$locale]) ? NULL : LANGUAGE_LTR;
    $default = ($install_locale == $locale);
    locale_add_language($locale, $name, $native, $direction, '', '', TRUE, $default);

    // Collect files to import for this language.
    $locale_batch = locale_batch_by_language($locale, NULL);
    $components[$locale] = $locale_batch['#components'];
    if (empty($batch)) {
      $batch = $locale_batch;
      continue;
    }
    if (!empty($locale_batch) && !empty($locale_batch['operations'])) {
      // Add operations we cover in this batch set.
      foreach ($locale_batch['operations'] as $operation) {
        $batch['operations'][] = $operation;
      }
    }
  }

  if (!empty($batch)) {
    // Remember components we cover in this batch set.
    $batch['#components'] = $components;
    variable_set('install_locale_batch_components', $batch['#components']);
    return $batch;
  }
}

/**
 * Installation task; import remaining languages via a batch process.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 *
 * @return
 *   The batch definition, if there are language files to import.
 */
function issues_profile_install_import_locales_remaining(&$install_state) {
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  // Collect files to import for this language. Skip components already covered
  // in the initial batch set.
  $install_locale = $install_state['parameters']['locale'];

  $batch = array();
  $components = variable_get('install_locale_batch_components', array());
  $locales = array(
    'ar' => 'ar',
    'es' => 'es',
    'fr' => 'fr',
    'ru' => 'ru',
  );
  foreach ($locales as $locale) {
    $locale_batch = locale_batch_by_language($locale, NULL, $components[$locale]);
    if (empty($batch)) {
      $batch = $locale_batch;
      continue;
    }
    if (!empty($locale_batch) && !empty($locale_batch['operations'])) {
      // Add operations we cover in this batch set.
      foreach ($locale_batch['operations'] as $operation) {
        $batch['operations'][] = $operation;
      }
    }
  }
  // Remove temporary variable.
  variable_del('install_locale_batch_components');

  // Check for translation updates.
  module_load_include('compare.inc', 'l10n_update');
  l10n_update_flush_projects();
  l10n_update_check_projects_local();

  // Import translation updates.
  module_load_include('fetch.inc', 'l10n_update');
  $fetch_batch = l10n_update_batch_fetch_build();
  if (empty($batch)) {
    $batch = $fetch_batch;
  }
  else {
    if (!empty($fetch_batch) && !empty($fetch_batch['operations'])) {
      // Add operations we cover in this batch set.
      foreach ($fetch_batch['operations'] as $operation) {
        $batch['operations'][] = $operation;
      }
    }
  }

  return $batch;
}

/**
 * Custom installation task; perform final steps and redirect the user to the
 * new site if there are no errors.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 *
 * @return
 *   A message informing the user about errors if there were some.
 */
function issues_profile_install_finished(&$install_state) {
  drupal_set_title(st('@issues installation complete', array('@issues' => 'The Issues Tool')), PASS_THROUGH);
  $messages = drupal_set_message();

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());
  variable_set('install_task', 'done');

  // Rebuild the node access permissions.
  node_access_rebuild();

  // Flush all caches to ensure that any full bootstraps during the installation
  // do not leave stale cached data, and that any content types or other items
  // registered by the installation profile are registered correctly.
  drupal_flush_all_caches();

  // Install profiles are always loaded last
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();
  
  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  // We did not enable the issues_blocks_feature and the
  // issues_menu_feature in function devtac_install_additional_modules().
  // Instead we decided to put a marker in the database to do a menu rebuild
  // later and enable the module later. Setting the marker here and now.
  variable_set('issues_profile_menu_rebuild_needed', TRUE);

  if (isset($messages['error'])) {
    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
    return $output;
  }
  else {
    // Since any module can add a drupal_set_message, this can bug the user.
    // For a better user experience, remove all the message that are only
    // "notifications".
    drupal_get_messages('status', TRUE);
    drupal_get_messages('completed', TRUE);

    // If we don't install The Issues Tool using Drush, show some messages to
    // the user.
    if (!drupal_is_cli()) {
      $output = '<p>' . st('Congratulations, you installed @issues!', array('@issues' => 'The Issues Tool')) . '</p>';
      $output .= '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';

      return $output;
    }
  }
}
